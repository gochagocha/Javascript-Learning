
JavaScript-ის კურსი


ამ კურშში შეისწავლეთ თანამედროვე JavaScript-ს ნოლიდან, პრაქტიკული დავალებების შეასრულების საშუალებით. დავალებები შედგენილია ცხოვრებისეული მაგალითების გამოყენებით, რომელთა შესრულებითაც ნაბიჯ-ნაბიჯ აითვისებთ JavaScript-ზე პროგრამის წერის საუკეთესო პრაქტიკას.

ეს კურსი გათვლილია მათთვის, ვისაც გარკვეული გამოცდილება აქვს პროგრამირების რომელიმე ენაში მაინც.

რას შეისწავლით

ქვემოთ წარმოდგენილია თემები რასაც ამ კურსში შეისწავლით. გაკვეთილები და დავალებები დაგეხმარებათ ნაბიჯ-ნაბიჯ  აითვისოთ ეს თემები. 



•	სტრიქონები
•	რიცხვები
•	ცვლადები
•	პირობები
•	მასივები
•	ფუნქციები
•	ისროვანი ფუნქციები
•	ობიექტები
•	კლასები
•	ხედვის არე
•	Web-კომპონენტები
•	HTML ტემპლეიტი
•	მეტი მართვის ნაკადის შესახებ
•	იმპორტ/ექსპორტი
•	JSON
•	Promisis
•	Fetch
•	API
•	ასინქრონულობა
•	DOM
•	ხდომილება
•	ფორმები
•	მომხმარებლის ელემენტები
•	ჩრდილოვანი DOM





































JS ფლეშქარდი

იმეცადინე ყველგან

თქვენ შეგიძლიათ გამოიყენოთ ფლეშქარდ APP და ყველგან შეგიძლიათ გაიმეოროთ განვლილი მასალა მობილური აპლიკაციის გამოყენებით. 
თქვენ შეგიძლიათ გამოიყენოთ ფლეშქარდ APP და ყველგან შეგიძლიათ გაიმეოროთ







რატომ უნდა აირჩიოთ ეს კურსი?


•	შეისწავლით მოკლე და გასაგებ სასწავლო მასალას
•	დავალებებს შეასრულებთ ინტერეაქტიულად
•	განვლილ მასალას გაიმეორებთ ფლეშ ქარდებით
•	გაეცნობით ვიდეო ინსტრუქციებს ახალი კოცეფციების გასაგებად
•	გექნებათ  მინიშნებები, პრობლემის შემთხვევაში
•	გიპასუხებთ კითხვებზე, პრობლემის შემთხვევაში
•	დამთავრების შემდეგ მიიღებთ სერთიფიკატს
•	გაკვეთილიდან შეინახავთ მნიშვნელოვან ფრაგმენტებს და შექმნით საკუთარ კონსპექტს
•	დაათვალიერებთ საკუთარ კონსპექტს
•	დააექსპორტებთ / ამობეჭდავთ კონსპექტს
•	ნახავთ დავალებების პასუხებს.













შესავალი

მოგესალმებით JavaScript-ის შემსწავლელ კურსზე!

ახლა აგიხსნით, თუ როგორ შეისწავლით თანამედროვე JavaScript-ს ამ კურსის საშუალებით.

ყოველი გაკვეთილი შეიცავს ამა თუ იმ თემის შესახებ მოკლე მასალას, რომელიც შემდგომში გამოგადგებათ იგივე თემასთან დაკავშირებული დავალებების შესასრულებლად. 
თქვენ ნაბიჯ-ნაბიჯ შეისწავლით ახალ სინტაქსს, ფუნქციებს და კონცეფციებს, რომლებსაც უშულოდ გამოიყებთ დავალებებში.




მობილური ფლეშქარდები

ყოველ ჯერზე, როცა კი დაამთავრებთ დავალების შესრულებას, თქვენ გეხსნებათ ახალი ფლეშქარდების ნაკრები, რომლითაც მობილური აპლიკაციით შეძლებთ გაიმეოროთ და განიმტკიცოთ ცოდნა განვლილ მასალაში. 










მზად ხართ, რომ დავიწყოთ?

ყოველი გაკვეთილის წაკითხვის შემდეგ , ან ყოველი დავალების შესრულების შემდეგ დააკლიკეთ ღილაკზე „შემდეგი“. 

1.	ფუნქციის შესახებ

დავიწყოთ ფუნქციის ახსნით:

function sum(x, y) {
    return x + y;
}

კოდის ამ ფრაგმენტით განისაზღვრება ფუნქცია რომლის სახელია sum. ეს იმას ნიშნავს, რომ როცა გამოიძხებთ ფუნქციას sum(1, 2), ის დაგიბრუნებთ 3-ს. 
თქვენ მისი გამოძახება ხელახლა შეგიძლიათ სხვა მონაცემების გადაცემით. მაგალითად sum(4, 5) დაგიბრუნებთ მნიშვნელობას 9-ს.




Return-ის შესახებ

ამ კურსში დავალებების უმეტესობა შეიცავს ფუნქციას, და თქვენ უნდა დაასრულოთ კოდი return-ის შემდეგ. 

return-ი მიუთითებს ფუნქციას თუ რა მნიშვნელობა უნდა დააბრუნოს ამ ფუნქციამ, ასე რომ ის უმეტეს შემთხვევაში აუცილებელი ოპერატორია.



როგორ მუშაობს ის

ქვემოთ წარმოდგენილია მოკლე ვიდეო ინსტრუქცია, სადაც ნაჩვენებია, თუ როგორ უნდა გადაწყვითოთ დავალებები. 





დავალება

ჯამი

დაასრულეთ წარმოდგენილი ფუნქცია sum, ისე რომ მან დააბრუნოს x და y-ის ჯამი
თუ გაგიჭირდათ იხილეთ ვიდეო ინსტრუქცია.

/**
 * @param {number} a
 * @param {number} b
 */
function sum(a, b){
    return ;
}

//sample usage
console.log(sum(1, 3));
console.log(sum(2, 5));












დავალება

ნამრავლი
დაასრულეთ წარმოდგენილი ფუნქცია multiply, ისე რომ მან დააბრუნოს x და y რიცხვების ნამრავლი.

/**
 * @param {number} a
 * @param {number} b
 */
function multiply(a, b){
    return a * b;
}
ნაშთიანი გაყოფა

დაასრულეთ წარმოდგენილი ფუნქცია remains(ნაშთი), ისერო მან დააბრუნოს x და y რიცხვების გაყოფის შედეგად მიღებული ნაშთი.

/**
 * @param {number} a
 * @param {number} b
 */
function multiply(a, b){
    return a % b;
}


















გაკვეთილი
მობილური ფლეშქარდები


გილოცავთ პირველი ორი დავალების წარმატებით შესრულებას! ახლა თქვენ შეგიძლიათ გამოიყენოთ მობილური ფლეშქარდები, რითაც საშუალება გეძლევათ გაიმეოროთ განვლილი მასალა და განიმტკიცოთ ცოდნა. 

ფლეშქარდის დაყენება

გადაუღეთ ფოტო  ამ QR ოდს და დააკლიკეთ შემოთავაზებულ ბმულზე. ან უბრალოდ დააკლიკეთ ამ ღილაკზე და ჩვენ გამოგიგზავნით ელ. ფოსტით ბმულს რომლითაც პირდაპირ გადახვალთ თქვენს ანგარიშზე. 

ასევე შეგიძლიათ გადახვიდეთ ბმულზე flashcards.learnjavascript.online და დააკლიკოთ Sign in with Github.

ამის შემდეგ ...

ყოველ ჯერზე, როცა შეასრულებთ ამა თუ იმ დავალებას გაგეხსნებათ წვდომა ახალ ფლეშქარდზე, რომელიც ეფუძნება გაკვეთილს რომელიც გაიარეთ.

ყოველდღე გამოყავით გარკვეული დრო, რათა ფლეშქარდების მეშვეობით განიმტკიცოთ ცოდნა და აგიმეოროთ განვლილი მასალა.


2.	სტრიქონები

გაკვეთილი
სტრიქონები

გაკვეთილის წაკითხვის შემდეგ თქვენ შეგიძლიათ მონიშნოთ ნებისმიერი ფრაგმენტი ტექსტიდან და შეინახოთ ის თქვენს კონსპექტში. მაუსით ტექსტის მონიშვნისთანავე გამონათდება მოდალური ფანჯარა, რომელიც შემოგთავაზებთ ამ ტექსტის შენახვას თქვენს კონსპექტში.

თქვენ შესაძლებლობა გექნებათ დავალების შესრულებისას გამოიძახოთ ეს მოკლე კონსპექტი Note ღილაკზე დაკლიკებით. 


JavaScript-ში სტრიქონის შექმნა შესაძლებელია ორმაგი (") ან ერთმაგი (') ბრჭყალების გამოყენებით.

ეს არის სტრიქონის მაგალითები:
"ეს არის სტრიქონი";
'ეს არის სხვა სტრიქონი';

არავითარი განსხვავება არ არის ორმაგი (") და ერთმაგი (') ბრყჭალებს შორის. ორივე ზუსტად ერთი და იგივეა. ორივე სახის სტრიქონი არ იძლევა ინტერპოლაციის საშუალებას (ინტერპოლაცია ნიშნავს ცვლადის ჩანერგვას სტრიქონის შიგნით). სტრიქონის ინტერპოლაციას მომავბალ გაკვეთილებში განვიხილავთ.

სტრიქონის მთავარი თვისებები

თვისება .length  გამოიყენება სტრიქოონის სიგრძის მისაღებად.

ქვემოთ მოცემულია მაგალითი სტრიქონი "მშვენიერი"-ს სიგრძის გასაგებად:
"მშვენიერი".lenght;
// დააბრუნებს 9

თქვენ შეისწავლით ცვლადებს ამ კურსის მომდევნო თავებში, მაგრამ წინასწარ განვიხილოთ რაიმე ცვლადი description, რომლის სიგრძე ასე შეიძლება გავიგოთ:
description.length;















სტრიქონის მთავარი მეთოდები

წარმოგიდგენთ სტრიქონის ძირითად მეთოდებს:
.includes(findString)
ეს მეთოდი აბრუნებს true (ჭეშმარიტია), თუ სტრიქონი შეიცავს  findString მნიშვნელობას. მაგალითად:

"დილა მშვიდობისა".includes("დილა"); // true (რადგან - სიტყვა დილა არის სტრიქონში)

"დილა მშვიდობისა".includes("კარტოფილი"); // false
.toUpperCase()
ეს მეთოდი აბრუნებს იგივე სტროქონს, რომელშიც ყველა ასო მთავრულია(დიდი ასოები):

"sun".toUpperCase(); // "SUN";

.toLowerCase()
ეს მეთოდი აბრუნებს იგივე სტროქონს, რომელშიც ყველა ასო პატარაა:

"BRavo".toLowerCase(); // "bravo";

















დავალებებისა და ტესტირების გარემო

დავალებების ეკრანის მარჯვენა მხარეს არის რედაქტორის ფანჯარა, სადაც თქვენი დავალების კოდის გაშვება და ტესტირება შეგიძლიათ. ამ რედაქტორში ასევე მოცემული გექნებათ ამ დავალების შესრულებით მიღებული კოდის მარტივი გამოყენების შემთხვევები. 

// დავალება
function sum(x, y) {
    return x + y;
}

// ფუნქციის მარტივი გამოყენება
sum(1, 3);

მარტივი გამოყენების კოდი საშუალებას გაძლევთ, გაუშვათ თქვენს მიერ დაწერილი კოდი და დარწმუნდეთ მის სისწორეში. თუმცა ყოველთვის გახსოვდეთ, რომ ჩვენ თქვენს მიერ დაწერილ ფუნქციას ავტომატურად შევამოწმებთ სხვადასხვა შემთხვევებისათვის, რათა დავრწმუნდეთ მის სისწორეში.

ასე, რომ მიუხედავად იმისა, რომ თქვენ უშვებთ  ფუნქციას sum(1, 3), ჩვენი მხრიდან ფონურ რეჟიმში სხვადასხვა პარამეტრებითაც ვტესტავთ თქვენს დაწერილ ფუნქციას. 



console.log-ის შესახებ

როდესაც დავალებას შეასრულებთ და დაასრულებთ ფუნქციის წერას, შეგიძლიათ ფუნქციის შედეგი console.log-ით გამოიტანოთ კონსოლზე.  

console.log(variable_or_expression)

ამით შეძლებთ უკეთესად გაერკვეთ თქვენს მიერ შესრულებელ დავალებაში.
















დავალება
სტრიქონის სიგრძე

დაასრულეთ ფუნქცია getTextLenght ისე, რომ დააბრუნოს მასზე გადაცემული text პარამეტრის სიგრძე.

/**
 * @param {string} text
 */
function getTextLength(text){
    return text.length;
}

// ფუნქციის მარტივი გამოყენება
console.log(getTextLength("მაგიდა"));
console.log(getTextLength ("Levani"));
console.log(getTextLength ("არგენტინა"));
















დავალება
სტრიქონის გამთავრულება

დაასრულეთ ფუნქცია textInUpperCase ისე, რომ მასზე გადაცემული text სტრიქონი  გამთავრულებული დააბრუნოს.

/**
 * @param {string} text
 */
function textInUpperCase(text){
    return text.toUpperCase() ;
}

// ფუნქციის მარტივი გამოყენება
console.log(textInUpperCase("ANA"));
console.log(textInUpperCase("George"));
















დავალება
სტრიქონის ასოების დაპატარავება

დაასრულეთ ფუნქცია textInLowerCase ისე, რომ მასზე გადაცემული text სტრიქონის ასოები დაპატარავებული დააბრუნოს.

/**
 * @param {string} text
 */
function textInLowerCase(text){
    return name.toLowerCase() ;
}

// ფუნქციის მარტივი გამოყენება
console.log(textInLowerCase("Anastasia"));
console.log(textInLowerCase("ARGENTINA"));



















გაკვეთილი
სტრიქონის ასონიშანთან წვდომა

თქვენ შეგიძლიათ წვდომა განახაორციელოთ სტრიქონის ცალკეულ ასონიშანთან კვადრატული ფრჩხილების [] გამოყენებით.
გაითვალისწინეთ, რომ სტრიქონის ასოების გადანომვრა ნულიდან იწყება. 

მოდით განვიხილოთ მაგალითი. ვთქვათ ცვლადს progLang-ს უკვე მინიჭებული აქვს მნიშვნელობა „JavaScript”. ქვემოთ მოცემულია პირველ, მეორე და მესამე ასონიშანთან წვდომის მაგალითები:
progLang[0]; // პირველი ასონიშნი  J
progLang[1]; // მეორე ასონიშნი  a
progLang[2]; // მესამე ასონიშნი  v

შენიშვნა: ცვლადებს და მინიჭებას მოგვიანებით დაწვრილებით განვიხილავთ, ახლა კი მოკლედ გეტყვით, რომ ცვლადი - ეს ისეთი ობიექტია, რომელიც თავის თავში ინახავს სხვადასხვა ტიპის მონაცემებს, მაგალითად სტრიქონებს ან რიცხვებს. 
გამოცხადებისას მას წინ უნდა უძღოდეს საკვანძო სიტყვა var: 
var x; //აქ გამოვაცხაადეთ ცვლადი x
var x, b1, newVar, new_var; //აქ ჯგუფურად გამოვაცხადეთ ცვლადები 
 
მინიჭების ოპერაციით ცვლადს შეიძლება მივანიჭოთ სხვადასხვა მნიშვნელობა. მაგალითად: 
var a = 7; //ჩვენ ცვლად b-ს მივანიჭეთ მნიშვნელობა 7 
var progLang = “JavaScript”; //ჩვენ ცვლად progLang-ს მივანიჭეთ მნიშვნელობა “JavaScript” 

თუ თქვენ გსურთ progLang[1] მნიშვნელობა იხილოთ, შეგიძლიათ გამოიყენოთ ბრძანება: console.log(progLang[1]);

წვდომისა და .lenght-ის კომბინაცია

თქვენ შეგიძლიათ ერთდროულად გამოიყენოთ ასონიშანთან წვდომა და .lenght სტრიქონის თვისება. წარმოდგენილი მაგალითი გვიჩვენებს, თუ როგორ მივიღოთ იგივე  progLang ცვლადის ბოლოდან მეორე ასონიშნი: 
progLang[progLang.length - 2 ]; // მივიღებთ "p" , რადგანაც ის არის "JavaScript" სტრიქონის ბოლოდან მეორე ასონიშანი.
უნდა აღინიშნოს რომ progLang[progLang.length]; ბრძნება დააბრუნებს undefined მნიშვნელობას, რადგანაც როგორც ვთქვით სტრიქონის ასონიშნების დანომვრა 0-დან იწყება. progLang.length გვიბრუნებს 10, ანუ  "JavaScript"-ის სიგრძე არის 10, ხოლო მისი ბოლო ასონიშანის რიგითი ნომერია 9. ასე რომ ასონიშანი მე-10 ნომრად progLang[10] არ არსებობს. 




კომენტარების შესახებ

თქვენ ალბათ უკვე შამჩნევდით, რომ დავალებების კოდები იწყება კომენტარებით, რომლებიც მიახლოებით ასე გამოიყურება:

/**
* @ Param {string} text
*/

ეს კომენტარები გამოიყენება კოდის უკეთ გასარჩევად.  ამ კონკრეტულ შემთხვევაში მითითებულია პარამეტრის ტიპი და სახელი, რომელსაც გადავცემთ ფუნქციას. თქვენ შეგიძლიათ სულაც კომენტრაის გარეშე დაწეროთ კოდი. ისინი კოდის შესრულებაზე არ მოქმედებენ.





 

დავალება
პირველი ასონიშნის აღება

დაასრულეთ ფუნქცია getFirstChar ისე, რომ დააბრუნოს მასზე გადაცემული text-ის პირველი ასონიშანი.
/**
 * @param {string} text
 */
function getFirstChar(text){
    return ;
}

// ფუნქციის მარტივი გამოყენება
console.log(getFirstChar("გიორგი"));
console.log(getFirstChar("ამსტერდამი"));

















დავალება
ბოლო ასონიშნის აღება

დაასრულეთ ფუნქცია getLastChar ისე, რომ დააბრუნოს მასზე გადაცემული text-ის ბოლო ასონიშანი.
/**
 * @param {string} text
 */
function getLastChar(text){
    return ;
}

// ფუნქციის მარტივი გამოყენება
console.log(getLastChar("მზე"));
console.log(getLastChar("პარიზი"));



























გაკვეთილი
ქვესტრიქონი

ქვესტრიქონი წარმოადგენს სტრიქონის ნაწილს. მაგალითად სტრიქონი „ლისი“ წარმოადგენს სტრიქონი „თბილისი“-ს ქვესტრიქონს. თქვენ შეგიძლიათ  „ლისი“ მიიღოთ „თბილისი“-ს ბოლო 4 ასო ნიშნით.

როდესაც სტრიქონებთან იმუშავებთ, ხშირად მთლიანად სტრიქონის გამოყენების ნაცვლად დაგჭირდებათ მისი რამოდენიმე ასონიშანი. ამისთვის გამოვიყენებთ substring მეთოდს.


Substring-ის სინტაქსი

ფუნქციის სინტაქსი განგვიმარტავს თუ რა სახის პარამეტრები უნდა გადავცეთ ფუნქციას და რას გვიბრუნებს ის. ვნახოთ Substring-ის სინტაქსი:

//Signature:
substring(startIndex, endIndex)

ეს იმას ნიშნავს, რომ როცა გამოიძხებთ Substring მეთოდს, უნდა გადასცეთ 2 პარამეტრი - startIndex და endIndex.
•	startIndex: საწყისი სტრიქონის ასონიშნის ის პოზიცია, რომლიდანაც უნდა დაიწყოს ქვესტრიქონი.
•	endIndex: საწყისი სტრიქონის ასონიშნის ის პოზიცია, რომლამდეც უნდა დამთავრდეს ქვესტრიქონი.

ეს ნიშანავს იმას, რომ endIndex თუ არის 7, ქვესტრიქონის ბოლო ასონიშანი იქნება საწყისი სტრიქონის მე-6 ასონიშანი.

განვიხილოთ მაგალითი. ვთქვათ ცვლადს capital-ს მინიჭებული აქვს მნიშვნელობა „თბილისი“. მოდით ამ სტრიქონიდან მივიღოთ ქვესტრიქონი startIndex – 2 დან დაწყებული endIndex – 5 მდე. ანუ მივიღებთ ქვესტრიქონს,  capital სტროქონის მე-2 ასონისNიდან დაწყებული მე-4 ასონიშნის ჩათვლით.
 
თ ბ ი ლ ი ს ი
0  1  2  3  4 5 6

Substring-ი დაგვიბრუნებს „ილი“-ს.

ვნახოთ JavaScript-ზე დაწერილი ეს კოდი:

const capital = "თბილისი";
capital.substring(2, 5); //დააბრუნებს "ილი"-ს


დამატებითი პარამეტრები

endIndex არის დამატებითი პარამეტრი, რაც იმას ნიშნავს, რომ შესაძლებელია მისი გამოტოვება, რაც იმას ნიშნავს, რომ endIndex-ის მნიშვნელობად ავტომატურად იგულისხმება სტრიქონის სიგრძე. ვნახოთ მაგალითი:

capital.substring(3); //დააბრუნებს "ლისი"-ს

რადგანაც სტრიქონი "თბილისი"-ს სიგრძეა 7, 
იგივე შედეგს მივიღებდით რომ დაგვეწერა: 
capital.substring(3,7);


მსგავსი  მეთოდების შესახებ

თუ შენ უკვე გაქვს JavaScript-ზე მუშაობის გარკვეული გამოცდილება, შეიძლება ქვესტრიქონის მისაღებად სხვა მეთოდს იყებედი. ამ კურსში ნახსენები არ იქნება ამ მეთოდის შესახებ, რადგანაც მისი გამოყენება არაა სასურველი. 



დავალება
გამოტოვეთ პირველი ასონიშანი

დაასრულეთ ფუნქცია skipFirstChar ისე, რომ დააბრუნოს მასზე გადაცემული text-ის ყველა ასონიშანი პირველის გარდა.
/**
 * @param {string} text
 */
function skipFirstChar(text){
    return text.subscript(1);
}

// ფუნქციის მარტივი გამოყენება
console.log(text.skipFirstChar("ხპარიზი"));

















დავალება
ქვესტრიქონი ვრცლად

დაასრულეთ ფუნქცია getFiveChars ისე, რომ დააბრუნოს მასზე გადაცემული text-ის ექვსი ასონიშნი დაწყებული მე-2 ასონიშანიდან.
/**
 * @param {string} text
 */
function getFiveChars(text){
    return text.subscript(1,7);
}

// ფუნქციის მარტივი გამოყენება
console.log(text.getFiveChars("ტანმოვარჯიშე"));
















გაკვეთილი
ნიშანი პლიუსი

JavaScript-ში ნიშან პლიუსს (+) სხვადასხვა დანიშნულება აქვს, იმისდა მიხედვით თუ რა ტიპის ცვლადებისთვის იყენებთ მას.

თქვენ უკვე ნახეთ, რომ 2+3 გიბრუნებთ 5-ს.
თუმცა პლიუსის (+) გამოყენება ასევე შესაძლებელია, როცა ორი სტრიქონის გაერთიანება (ანუ კონკეტენაცია) გინდათ, რის შედეგადაც 1 სტრიქონი მიიღება.

განვიხილოთ მაგალითი:
 "გამარჯობათ" + "ხალხო" // აბრუნებს "გამარჯობათხალხო"

ეს ბრძანება დააბრუნებს ერთ სტრიქონს "გამარჯობათხალხო"






დავალება
სტრიქონების კონკეტენაცია

დაასრულეთ ფუნქცია concatStrings ისე, რომ დააბრუნოს მასზე გადაცემული firstString და lastString სტრიქონების გაერთიანებით მიღებული სტრიქონი
/**
 * @param {string} firstString
 * @param {string} lastString
 */
function concatStrings(firstString, lastString){
    return firstString + lastString;
}

// ფუნქციის მარტივი გამოყენება
console.log(text.concatStrings("დედას ", "გეფიცები" ));




















გაკვეთილი
სტრიქონის შაბლონი

როგორც უკვე ვიცით JavaScript-ში სრიქონების შექნა შესაძლებელია, როგორც ერთმაგი ასევე ორმაგი ბრჭყალებით. მაგრამ თქვენ ასევე იცით, რომ სტრიქონი არ იძლევა ინტერპოლაციის (ცვლადის ჩანერგვა) საშუალებას.

სტრიქონისგან განსხვავებით სტრიქონის შაბლონი იძლევა როგორც ინტერპოლაციის ასევე სხვა ხრიკებსიც  საშუალებასაც. 


თქვენი პირველი სტრიქონის შაბლონი

`ეს არის სტრიქონის შაბლონი`

სტრიქონსა და სტრიქონის შაბლონს შორის მხოლოდ ის განსხვავებაა, რომ სტრიქონის შაბლონი იწყება და იხურება შებრუნებული ბრჭყალით (ე.წ. backtick).

კლავიატურების უმეტესობაზე შებრუნებული ბრჭყალი განლაგებულია Esc ღილაკის ქვეშ. 


მრავალხაზიანი სტრიქონი

ერთმაგი და ორმაგ ბრჭყალებიანი სტრიქონებისგან განსხვავებით განსხვავებით სტრიქონის შაბლონი შეიძლება რამოდენიმე ხაზზე განლაგდეს. იხილეთ მაგალითი:

`ეს არის 
მრავალხაზიანი სტრიქონის 
მაგალითი`







ინტერპოლაცია

სტრიქონის შაბლონი იძლევა ინტერპოლაციის შაშუალებას! ეს ნიშნავს, რომ თქვენ შეგიძლაით სტრიქონში ჩაწეროთ ცვლადი და სტრიქონშივე მიიღოთ მისი მნიშვნელობა. სინტაქსი მარტივის - სტრიქონში ჩანერგილ ცვლად ფიგურულ ფრჩხილებში მოათავსებ და წინ დაუწერ დოლარის ნიშნს. მოდით განვიხილოთ მაგალითი, სადაც ცვლადს progLang-ს მინიჭებული აქვს მნიშვნელობა JavaScript-ი.
`მე ვსწავლობ ${language}-ს`; //დააბრუნებს "მე ვსწავლობ  JavaScript-ს"

შეგახსენებთ რომ სტრიქონის ინტერპოლირება მუშაობს მხოლოს შებრუნებული ბრჭყალების (ე.წ. backtick) შემთხვევაში. თუ როდესმე აღმოჩნდა რომ ის არ მუშაობს, გულმოდგინედ შეამოწმეთ გამოყენებული გაქვთ თუ არა შებრუნებული ბრჭყალები და არა ორმაგი ან ერთმაგი ბრჭყალები.

შებრუნებული ბრჭყალები tab ღილაკის ზემოთაა განთავსებული.

დამატებითი მაგალითები

•	როგორ ჩავწეროთ მრავალხაზიანი სტრიქონი
•	როგორ განვახორციელოთ ინტერპოლაცია


როგორ ჩავწეროთ მრავალხაზიანი სტრიქონი

const text = `Using the backtick character
you can define a string that
spans multiple lines.`;


როგორ განვახორციელოთ ინტერპოლაცია

const name = "ბადრი";

console.log(`მოგესალმებით ${name}.
თქვენ გიფიქსირდებათ ${3 * 4} ახალი შეტყობინება!`);

კონსოლზე გამოვა:
მოგესალმებით ბადრი.
თქვენ გიფიქსირდებათ 12 ახალი შეტყობინება!




















დავალება
სტრიქონის ინტერპოლაცია

დაასრულეთ ფუნქცია sayHi ისე, რომ ჩააინტერპოლიროს მასზე გადაცემული name ცვლადი სტრიქონში "გამარჯობა name"
/**
 * @param {string} name
*/
function sayHi(name){
    return `გამარჯობა ${name}`;
}

// ფუნქციის მარტივი გამოყენება
console.log(sayHi("ბონდო"));












დავალება
სტრიქონის ინტერპოლაცია ვრცლად

დაასრულეთ ფუნქცია getFullName ისე, რომ ინტერპოლაციის გამოყენებით დააბრუნოს ადამიანის სახელი და გვარი 
/**
 * @param {string} firstName
 * @param {string} lastName
 */
function getFullName(firstName, lastName){
    return `${ firstName } ${ lastName }`;
}

// ფუნქციის გამოყენება
console.log(getFullName("ბონდო", "დევდარიანი"));

დავალება
მრავალხაზიანი სტრიქონი 

დაასრულეთ ფუნქცია getMultilineText ისე, რომ დააბრუნოს მრავალხაზიანი სტრიქონი. თქვენ ახალ ხაზზე უნდა დაამატოთ ახალი ხაზი  "ძალიან მაგარია!"

function getMultilineText() {
    return `Template strings 
    are so powerful!`;
}

//ფუნქციის გამოყენება
console.log(getMultilineText());


დავალება
სიტყვის პირველი ასოს გამთავრულება

დაასრულეთ ფუნქცია capitalizeWord ისე, რომ მასზე გადაცემული word არგუმენტის პირველი ასო გაამთავრულებული, ხოლო დანარჩენი ასოები დაპატარავებულები დააბრუნოს. 
ეს მეთოდი JavaScript-ში არ არსებობს, ასე რომ თქვენ მოგიწევთ მისი შექმნა. მოგიყვანთ სიტყვის პირველი ასოს გამთავრულების მაგალითს: "gEorGe" უნდა შეიცვალოს "George"-თი 

/**
 * @param {string} word
 */
function capitalizeWord(word){
    return word[0].toUpperCase() + word.substring(1).toLowerCase();
}

//ფუნქციის გამოყენება
console.log(capitalizeWord ("ann")); //Ann
console.log(capitalizeWord ("tbilisi")); //Tbilisi
console.log(capitalizeWord ("suBmarinE")); //Submarine



გაკვეთილი
სტრიქონის დაკავშირებული სხვა მეთოდები

გოლოცავთ! თქვენ აშკარად ბევრს მიაღწიეთ სტრიქონების შესწავლაში 

დოკუმენტაციები ინტერნეტში

თუ თქვენ გადახედავთ JavaScript-ის სხვადასხვა  დოკუმენტაციებს ინტერნეტში, ხშირად შეხვდებით String.protype.substring (). რას წარმოადგენს პროტოტიპი და რაში გამოგვადგება ის? ამ კითხვაზე მოგვიანებით გიპასუხებთ. ამ მომენტისათვის კი გეტყვით, როიმ როცა კი წააწყდებით String.prototype.something(),ეს იმას ნიშნავს, რომ არსებობს მეთოდი something(), რომლის გამოძახებით შეგიძლიათ სტრიქონთან დაკავშირება. JavaScript-თან დაკავშირებით შეგიძლიათ ნახოთ ძლიან კარგი დოკუმენტაცია Mozilla Developer Network ბმულზე. თუმცა, თუ თქვენ JavaScript-ი ახალი დაწყებული გაქვთ, შეიძლება ეს დოკუმენტაცია რთულად მოგეჩვენოთ. ეს რომ ასე არ მოხდეს, ამიტომ ამ სახელმძღვანელოში შეგასწავლთ, თუ როგორ მოიძიოთ და გამოიყენოთ ესა თუ ის დოკუმენტაცია ინტერნეტში.

ეს ძალიან მნიშვნელოვანია, რომ კარგი პროგრამისტი გახდეთ 

 სტრიქონის დაკავშირებული სხვა მეთოდები

არსებობს  სტრიქონის დაკავშირებული მეთოდები, რომელთა გამოყენებაც მომავალში აუცილებლად დაგჭირდებათ.


startsWith () და endsWith ()

.startsWith (searchString)  დააბრუნებს true-ს თუ სტრიქონი იწყება searchString-თ, წინააღმდეგ შემთხვევაში დააბრუნებს false-ს. 
.endsWith (searchString) დააბრუნებს true-ს თუ სტრიქონი მთავრდება searchString-თ, წინააღმდეგ შემთხვევაში დააბრუნებს false-ს.

იხილეთ მაგალითები: 
const phoneNumber = "-23474231";
phoneNumber.startsWith("-"); //true
phoneNumber.startsWith("23"); //false


trim()

წარმოიდგინეთ, რომ თქვენი სისტემის მომხმარებელს თხოვთ რეგისტრაციისას მიუთითოს თავისი email და მას შეყავს: "name@mail.com "  შეამჩნიეთ ალბათ, რომ სტრიქონის ბოლოს ცარიელი სიმბოლოა შეტანილი?

ამ შემთხვევისათვის თქვენ შეგიძლიათ გამოიყენოთ trim, რათა სტრიქონიდან წაშალოთ ცარიელი სიმბოლოები და ახალ ხაზზე გადასვლა.

დავალება
ცარიელი სიმბოლოების წაშლა სტრიქონიდან

დაასრულეთ ფუნქცია removeExtraSpaces, რომელიც მასზე გადაცემული txt სტრიქონიდან წაშლის თავში და ბოლოში ცარიელ სიმბოლოებს (არსებობის შემთხვევაში)

/**
 * @param {string} txt
 */
function removeExtraSpaces(txt){
    return txt.trim();
}

//ფუნქციის გამოყენება
console.log(removeExtraSpaces(" რა ხდება "));














დავალება
სტრიქონი იწყება ქვესტრიქონისგან

დაასრულეთ ფუნქცია tbilisiIsFirstWord, რომელიც დააბრუნებს true-ს, თუ მასზე გადაცემული პარამეტრი text იწყება სიტყვა "თბილისი"-თ, წინააღმდეგ შემთხვევაში დააბრუნებს false-ს. 

/**
 * @param {string} text
 */
function tbilisiIsFirstWord(text){
        return text.startsWith("Amsterdam");
}

//ფუნქციის გამოყენება
console.log.tbilisiIsFirstWord("თბილისი საქართველოს დედაქალაქია"));




















3.	რიცხვები

გაკვეთილი
რიცხვები

0
1
2
-7
12.8
1200
3000
-50.23

JavaScript-ში ყველაფერი ეს არის რიცხვების მაგალითები. არავითარი მნიშვნელობა არ აქვს ისინი უარყოფითია თუ დადებითი, ათწილადი ნაწილი აქვს თუ არა (ციფრები წერტილის . შემდეგ). JavaScript-ში მათ რიცხვები ეწოდებათ.

რიცხვების გადაქცევა (კონვერტაცია) სტრიქონად

თქვენ შეგიძლიათ რიცხვები მარტივად გადააქციოთ სტრიქონად .toString() მეთოდის საშუალებით.
მოდით განვიხილოთ მაგალითი, სადაც გვაქვს result ცვლადი, რომელსაც მინიჭებული აქვს მნიშვნელობა 35;

result.toString(); //დააბრუნebs სტრიქონს - "35"

სტრიქონის გადაქცევა (კონვერტაცია) რიცხვად

წინა მეთოდის მსგავსად შეგიძლიათ სტრიქონი გადააქციოთ რიცხვად. ამისათვის უნდა გამოიყენოთ Number.parseInt მეთოდი.

იხილიეთ მაგალითი:

Number.parseInt("35"); / დააბრუნებს რიცხვს 35
მიაქციეთ ყურადღება იმას, რომ Number წარმოადგენს ობიექტს, რომელსაც აქვს რიცხვებთან დაკავშირებული მრავალი მეთოდი. ერთ-ერთი მათგანია parseInt მეთოდი. სწორედ ობიექტ Number-ის ამ მეთოდს იძახებთ, რათა სტრიქონი გადააქციოთ რიცხვად. 

თქვენ ხშირად ნახავთ გამოცდილი პროგრამისტების დაწერილ კოდს, სადა ისინი  მეთოდის გამოძახებისას იყენებენ დამატებით არგუმენტს:

Number.parseInt("35", 10); / დააბრუნებს რიცხვს 35

მეორე არგუმენტს ეწოდება radix. როცა radix არის 10, ეს იმასნიშნავს, რომ კონვერტაციისას გამოიყენება ათობითი სისტემა (როგორც ვიცით ათობით სისტემაში გვაქვს სულ ათი ციფრი 0-დან 9-მდე).მაგალითად კომპიუტერში გამოიყენება ორობითი სისტემა (1 და 0).

სამწუხაროდ parseInt მეთოდში radix-ს თუ არ მივუთითებთ არ იგულისხმება, რომ ის 10-ის ტოლი იქნება. ამიტომ რეკომენდებულია, რომ ის ყოველთვის მივუთითოთ. თუ radix-ს გამოვტოვებთ მეთოდმა შეიძლება ისე იმუშაოს როგორც ჩვენ ველით, ან არა . ასე, რომ დარწმუნებული რომ იყოთ მეთოდი სწორად იმუშავებს, ჯობია მიუთითოთ radix-ი.

დამატებითი მაგალითები

•	.toString -ის მაგალითები
•	როგორ ვაქციოთ სტრიქონი რიცხვად


როგორ ვაქციოთ სტრიქონი რიცხვად

Number.parseInt("35", 10);
35




დავალება
რიცხვის გადაქცევა სტრიქონად 

დაასრულეთ ფუნქცია convertNumToString რომელიც მასზე გადაცემულ რიცხვს გადააქცევს და დააბრუნებს სტრიქონად.

/**
 * @param {number} num
 */
function convertNumToString(num){
    return Number.parseInt(num, 10);
}

//ფუნქციის გამოყენება
console.log(convertNumToString(35));
console.log(convertNumToString(77));
console.log(convertNumToString(96));

















დავალება
სტრიქონი გადაქცევა რიცხვად

დაასრულეთ ფუნქცია convertStringToNum, რომელიც მასზე გადაცემულ სტრიქონს გადააქცევს და დააბრუნებს რიცხვად.

/**
 * @param {string} string
 */
function convertStringToNum(string){
    return Number.parseInt(string, 10); //42
}


//ფუნქციის გამოყენება
console.log(convertStringToNumber("37"));
console.log(convertStringToNumber("102"));
console.log(convertStringToNumber("57"));















გაკვეთილი
ოპერატორები

როგორც ვიცით რიცხვები შეიძლება ერთმანეთზე გადავამრავლოთ და გავყოთ. წინა გაკვეთილებში უკვე ვნახეთ რიცხვების გადამრავლების მაგალითი რისთვისაც გამოვიყენეთ გამრავლების * ოპერატორი. გაყოფისათვის გამოიყენეთ ოპერატორი /.


განაყოფის ნაშთი

თქვენ ასევე შეგიძლიათ გამოიყენოთ განაყოფის ნაშთის ოპერატორი %, რომელიც დაგიბრუნებთ ორი რიცხვის გაყოფისას მიბულ ნაშთს. იხილეთ მაგალითი: 
10 % 2; // განაყოფის ნაშთია 0
9 % 2; // განაყოფის ნაშთია 1 

ამ მაგალითში 10 ორზე უნაშთოდ იყოფა, ამიტომ % ოპერატორის შედეგია 0.
ხოლო 9-ის 2-ზე გაყოფის შედეგად გვექნება ნაშთი 1.

 









ლუწი და კენტი რიცხვები

ნაშთის ოპერატორი - % ხშირად გამოიყენება იმის გასაგებად ლუწია თუ კენტია ესა თუ ის რიცხვი.
ლუწია ის რიცხვები რომელთა 2-ზე გაყოფით ნაშთი მიიღება 0. (მათემატიკა 😊)

4% 2 = = = 0;//true (ლუწია)
7% 2 = = = 0;//false (არაა ლუწი)

ასეთი სინტაქსი საკმაოდ მოქნილია, რადგანც თქვენ უბრალოდ იგებთ რიცხვის 2-ზე გაყოფით მიღებულ ნაშთს და ადარებთ მას 0-ს. ასეთ სინტაქსს უფრო დეტალურად განვიხილავთ მე-5 თავში.

დამატებითი მაგალითები

•	როგორ მივიღოთ რიცხვების გაყოფით მიღებული ნაშთი
•	როგორ შევამოწმოთ რიხვი კენტია თუ არა
•	როგორ შევამოწმოთ რიხვი ლუწია თუ არა


როგორ მივიღოთ რიცხვების გაყოფით მიღებული ნაშთი
const even = 10 % 2;
const odd = 7 % 2;

console.log({ even, odd });
{
    even: 0,
    odd: 1
}






როგორ შევამოწმოთ რიხვი კენტია თუ არა
const num = 17;
const isEven = number % 2 === 0;
console.log(isEven);
true











როგორ შევამოწმოთ რიხვი ლუწია თუ არა
const number = 20;
const isOdd = number % 2 !== 0;
console.log(isOdd);

true










დავალება
რიცხვების გაყოფა

დაასრულეთ ფუნქცია divideNumbers, რომელიც მასზე გადაცემულ ორ რიცხვს x და y-ს ერთმანეთზე გაყოფს.

**
 * @param {number} x
 * @param {number} y
 */
function divideNumbers(x, y){
    return x/y;
}

//ფუნქციის გამოყენება
console.log(divideNumbers(4, 2));
console.log(divideNumbers(15, 5));













დავალება
განაყოფის ნაშთი

დაასრულეთ ფუნქცია divisionRemainder, რომელიც დააბრუნებს მასზე გადაცემულ ორი რიცხვის x და y-ს ერთმანეთზე გაყოფით მიღებულ ნაშთს.

**
 * @param {number} x
 * @param {number} y
 */
function divisionRemainder(x, y){
    return a % b;
}

//ფუნქციის გამოყენება
console.log(divisionRemainder(12, 2));
console.log(divisionRemainder(11, 6));





დავალება
ლუწი რიცხვის დადგენა

დაასრულეთ ფუნქცია isEven, რომელიც დააბრუნებს true-ს, თუ მასზე გადაცემული a რიცხვი ლუწია. შეეცადეთ არ გამოიყენოთ if ოპერატორი. უბრალოდ დაწერეთ პირობა, რომლის დროსაც a იქნება ლუწი. მოგვიანებით ავხსნით ეს მეთოდი როგორ მუშაობს.

/**
 * @param {number} a
 */
function isEven(a){
    return a % 2 === 0;
}

//ფუნქციის გამოყენება
console.log(isEven(6));
console.log(isEven(3));
console.log(isEven(18));










დავალება
კენტი რიცხვის დადგენა

დაასრულეთ ფუნქცია isOdd, რომელიც დააბრუნებს true-ს, თუ მასზე გადაცემული a რიცხვი ლუწია. შეეცადეთ არ გამოიყენოთ if ოპერატორი. უბრალოდ დაწერეთ პირობა, რომლის დროსაც a იქნება კენტი. მოგვიანებით ავხსნით ეს მეთოდი როგორ მუშაობს.

/**
 * @param {number} a
 */
function isOdd(a){
    return a % 2 === 1;
}

//ფუნქციის გამოყენება
console.log(isOdd(9));
console.log(isOdd(13));
console.log(isOdd(8));













გაკვეთილი
ცვლადები

JavaScript-ში ორნაირად შეიძლება გამოვაცხადოთ ცვლადი - let და  const. მოდით ვნახოთ რა განსხვავებაა მათ შორის. 

Let

თავიდან, როცა აცხადებთ (განსაზღვრავთ) ცვლადს, წინ უნდა დაუწეროთ let =. მოდით განვიხილოთ მაგალითი:

let animal = "ლომი";
console.log(animal);

ასე ვაცხადებთ ცვლადს animal-ს, რომლის მნიშვნელონაა "ლომი". ამის შემდეგ, როცა დაგჭირდებათ ცვლადი animal-ის გამოყენება, უბრალოდ მიუთითებთ მის სახელს (let სიტყვას ვიყენებთ მხოლოს ცვლადის გამოცხადებისათვის). 

Let-ით განსაზღვრულ ცვლადს, კოდის წერისას, შეიძლება სხვა მნიშვნელობა მიანიჭოთ:

let progLanguage = "python";
progLanguage = "JavaScript";

ვნახოთ სხვა მაგალითიც:
let sum = 0;
sum += 1;


const

const-ით გამოცხადებულ ცვლადზე მინიჭებული მნიშვნელობა აღარ იცვლება. ეს იმას ნიშნავს, რომ ტოლობის ნიშანი = თქვენ შეგიძლიათ მხოლოს ერთხელ გამოიყენოთ, როცა ცვლადის გამოცხადებისას მას ანიჭებთ მნიშვნელობას. ვნხოთ მაგალითი:

const progLanguage = "python"; // ცვლადის მნიშვნელობა უცვლელია
console.log(language); // "python"
progLanguage = "JavaScript"; // Type error: გამოიწვევს შეცდომას და შეწყდება პროგრამის შესარულება.


დამატებით const-ის შესახებ

გახსოვდეთ, რომ const-ით გამოცხადებული ცვლადი კონსტანტა არაა. ამ ეტაპისთვის უბრალოდ იცოდეთ, რომ ტოლობის ნიშანი მხოლოდ ერთხელ შეგიძლიათ გამოიყენოთ, თუმცა მისი მნიშვნელობის ცვლილება შესაძლებელია. შემდეგში, როცა ობიექტებს განვიხილავთ, უფრო დეტალურად განვიხილავთ ამ საკითხს.

let-ი თუ const-ი


ცვლადის გამოცხადებისას let-ი უნდა გამოიყენოთ თუ  const-ი? თუ იცით, რომ ცვლადს, თავიდან მნიშვნელობის მინიჭების შემდეგ სხვა მინიშვნელობა არ უნდა მიანიჭოთ, მაშინ გამოიყენეთ  const-ი. წინააღმდეგ შემთხვევაში let-ი.


var

ინტერნეტში JavaScript-ის დოკუმენტაციის ძებნისას ან StackOverflow-ში კითხვა-პასუხების ნახვისას შეამჩნევთ, რომ კოდის წარმოდგენილ მაგალითებში, let-ის და const-ის ნაცვლად ხშირადაა გამოყენებული var-ი. მიუხედავად იმისა, რომ var-ი JavaScript-ში ჯერ კიდევ მუშაობს, მისი გამოყენება ცვლადის გამოცხადებისას არაა მიზანშეწონილი, რადგანაც მან შეიძლება გამოიწვიოს მრავალი გაუგებრობა კოდში. ასე, რომ თქვენ შეგიძლიათ var-ის მაგივრად თავისუფლად გამოიყენოთ let-ი (ან const-ი, თუ დარწმუნებული ხართ, რომ მისი მნიშვნელობის თავიდან განსაზღვრა არ დაგჭირდებათ კოდში)


დამატებითი მაგალითები
•	როგორ გამოვაცხადოთ ცვლადი JavaScript-ში

როგორ გამოვაცხადოთ ცვლადი JavaScript-ში

// ცვლადი, რომლის მნიშვნელობა შიძლება შეიცვალოს
let counr = 0;
coun += 1;

// ცვლადი, რომლის მნიშვნელობა არ შეიცვლება
const hightLimit = 270;








დავალება
ცვლადის გამოცხადება

defineVariable ფუნქციაში გამოაცხადეთ ცვლადი counrer. განახორციელეთ მისი ინკრემენტირება (მნიშვნელობის გაზრდა 1-ით) და შემდეგ დააბრუნეთ მნიშვნელობა.


function defineVariable(){
      //გამოაცხადეთ ცვლადი counter მნიშვნელობით 0
let counter = 0;
      //განახორციელეთ მისი ინკრემენტირება 
counter++
    //ბოლოს დააბრუნეთ მისი მნიშვნელობა
return counter;
}





დავალება
ცვლადი, რომლზეც მეორეჯერ მნიშვნელობის მინიჭება არ ხორციელდება

defineVariable ფუნქციაში გამოაცხადეთ ცვლადი hightLimit მნიშვნელობით 270, რომლზეც მეორეჯერ მნიშვნელობის მინიჭება არ განხორციელდება. 

function defineVariable(){
    //გამოაცხადეთ ცვლადი hightLimit მნიშვნელობით 270
const hightLimit = 270;
}








გაკვეთილი
პირობითი ოპერატორები

JavaScript-ში პირობით ოპერატორებს  შემდეგი სტრუქტურა აქვთ:


If (პირობა) {
//რაიმე კოდი
}

განვიხილოთ მაგალითი:

const age = 15;
if (age > = 10) {
    // შესრულდა პირობა
}


Else

შესაძლებელია ასევევ else ბლოკის დამატება პირობის შეუსრულებლობის შემთხვევაში: 

const age = 15;
if (age > = 10) {
    // შესრულდა პირობა
} else {
   // არ შესრულდა პირობა

}


ვიდეო შეჯამაბა




ანონიმური გამოკითხვა

რას ფიქრობთ ამ კურსის შესახებ?

























დავალება
ასაკის შემოწმება 1

დაასრულეთ ფუნქცია canRecruited, რომელიც დააბრუნებს true-ს, თუ მასზე გადაცემული ცვლადი age მეტია ან ტოლი 20-ზე.  

/**
 * @param {number} age
 */
function canRecruited(age){
    if (age >= 20){
        return true;
    }
}

//ფუნქციის გამოყენება
console.log(canRecruited(17)) ; 








დავალება
ასაკის შემოწმება 2

დაასრულეთ ფუნქცია canRecruited, რომელიც დააბრუნებს true-ს, თუ მასზე გადაცემული ცვლადი age მეტია ან ტოლი 20-ზე, წინააღმდეგ შემთხვევაში დააბრუნებს false.  

/**
 * @param {number} age
 */
function canRecruited(age){
    if (age >= 20){
        return true;
    } else {
        return false;
    }
}

//ფუნქციის გამოყენება
console.log(canRecruited(27)) ; 









გაკვეთილი
ლოგიკური (ბულის) მნიშვნელობის დაბრუნება

წინა მაგალითებში, როდესაც ლოგიკურ  მნიშვნელობას (ბულის true ან false) აბრუნებდით,  ზედმეტად იყენებდით if და else ოპერატორებს. ვნახოთ მაგალითი:

function isSuccess (mark){
    if (mark >= 8){
        return true;
    }else{
        return false;
    }
}

//ფუნქციის გამოყენება
console.log(isSuccess(24)) ; 

if და else აქ იმიტომაა ზედმეტი, რომ თავად პირობა mark >= 8 აბრუნებს true-ს ან false-ს. რაც იმას ნიშნავს, რომ სულაც არაა საჭირო გამოვიყენთ if/else პირობითი ოპერატორები.

ასე, რომ შეიძლება ეს კოდი გავამარტივოთ:


function isSuccess (mark){
    return mark >= 8;
}

if/else-ის გარეშეც ფუნქცია დააბრუნებს ლოგიკურ მნიშვნელობას.


დავალება
ლოგიკური მნიშვნელობის დაბრუნება

დაასრულეთ ფუნქცია canRecruited, რომელიც დააბრუნებს true-ს, თუ მასზე გადაცემული ცვლადი age მეტია ან ტოლი 20-ზე, წინააღმდეგ შემთხვევაში დააბრუნებს false. არ გამოიყენოთ პირობითი ოპერატორები.

/**
 * @param {number} age
 */
function canRecruited(age){
        return age >= 20;
}

//ფუნქციის გამოყენება
console.log(canRecruited(18));









